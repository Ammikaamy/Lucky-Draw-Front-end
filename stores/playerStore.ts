// ‡πÄ‡∏û‡∏¥‡πà‡∏° import apiClient
import apiClient from '@/utils/apiClient'; // <--- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)

import type { playerType } from "@/types/player";
import type { roomTypes } from "@/types/room";
import { parsePlayerExcel } from "@/utils/excelParser"; // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°

export const usePlayerStore = defineStore("player", {
  state: () => ({
    isLoading: false,
    rooms: {
      id: "",
      name: "",
    } as roomTypes,
    players: [] as playerType[],
  }),

  actions: {
    async fetchRoom(roomId: string) {
      this.isLoading = true; // ‡∏¢‡πâ‡∏≤‡∏¢ isLoading ‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô try/catch/finally
      try {
        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô axios.get ‡πÄ‡∏õ‡πá‡∏ô apiClient.get ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ path ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
        const response = await apiClient.get(`/rooms/${roomId}`); // <--- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        if (response.status == 200) {
          this.rooms = response.data.data;
        }
      } catch (error) {
        console.error("Error fetching room:", error);
        // ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏≤‡∏ö
      } finally {
        this.isLoading = false; // ‡πÉ‡∏™‡πà‡πÉ‡∏ô finally ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏°‡∏≠
      }
    },

    async fetchPlayers(roomId: string) {
      this.isLoading = true;
      try {
        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô axios.get ‡πÄ‡∏õ‡πá‡∏ô apiClient.get ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ path ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
        const response = await apiClient.get( // <--- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
          `/players/list`,
          {
            params: { search: roomId },
          }
        );
        if (response.status == 200) {
          this.players = response.data.data;
        }
      } catch (e) {
        console.log("something went wrong fetching players", e);
      } finally {
        this.isLoading = false;
      }
    },

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡∏™‡πà‡∏ß‡∏ô Axios
    async handlePlayersExport(event: Event) {
      const input = event.target as HTMLInputElement;
      if (!input.files || input.files.length === 0) return;

      const file = input.files[0];
      this.isLoading = true;

      try {
        // parsePlayerExcel ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Axios
        const players = await parsePlayerExcel(file);
        if (players.length === 0) {
          alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤");
        } else {
          this.players = players; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state players ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Excel ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
          console.log("Players from Excel:", this.players);
        }
      } catch (error) {
        console.error("Import Error:", error);
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      } finally {
        this.isLoading = false;
      }
    },

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ú‡πà‡∏≤‡∏ô API
    async handlePlayerImport(file: File, roomId: string) {
      this.isLoading = true;
      try {
        const formData = new FormData();
        formData.append("file", file);
        formData.append("room_id", roomId);

        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô axios.post ‡πÄ‡∏õ‡πá‡∏ô apiClient.post ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ path ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
        // ‡∏ï‡πâ‡∏≠‡∏á override header ‡πÄ‡∏õ‡πá‡∏ô multipart/form-data
        const response = await apiClient.post( // <--- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
          `/players/import`,
          formData,
          {
            headers: { 'Content-Type': 'multipart/form-data' } // <--- Override Header
          }
        );

        console.log("üì¶ Import ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", response.data);
        // ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤: ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å import ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞ fetchPlayers ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
        await this.fetchPlayers(roomId); // <-- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fetchPlayers ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        return response.data;
      } catch (e: any) { // ‡∏£‡∏∞‡∏ö‡∏∏ type error ‡πÄ‡∏õ‡πá‡∏ô any ‡∏´‡∏£‡∏∑‡∏≠ AxiosError
        console.error("‚ùå Error importing excel", e.response?.data || e.message || e);
        alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤: ${e.response?.data?.message || e.message || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'}`);
        throw e; // ‡πÇ‡∏¢‡∏ô error ‡∏ï‡πà‡∏≠
      } finally {
        this.isLoading = false;
      }
    },
  },
});
